{"version":3,"sources":["utils/fakeData/patient.js","hooks/patientInfo.jsx","hooks/linecharts-moving.jsx","utils/fakeData/medication.js","hooks/linecharts-tabs.jsx","hooks/userOptions.jsx","hooks/donut-chart.jsx","components/dashboard.jsx","containers/AppContainer.js","reducers/index.js","index.js"],"names":["first_name","last_name","age","sex","admitted_on","admitted_to_IC","preconditions","name","value","medication","renderSubItems","items","map","item","Menu","Item","PatientInfo","props","Header","Icon","className","Patient","icon","Plot","createPlotlyComponent","Plotly","hb_options","bp_high_options","bp_low_options","sat_options","fakeData","n","options","y","i","push","Math","floor","random","length","LineChartsMoving","state","heartBeat","bp_high","bp_low","sat","sat_base","revisionId","layout","datarevision","xaxis","autorange","showgrid","zeroline","showline","autotick","ticks","showticklabels","yaxis","range","yaxis2","overlaying","side","xaxis2","updateData","shift","string","toString","substring","getPlotTracks","hb","x","Array","from","keys","type","mode","marker","color","fill","mirror","setState","this","obj","prop","hasOwnProperty","isEmpty","setTimeout","new_hb","new_bp_high","new_bp_low","new_sat","revision","data","React","Component","SizeMe","periods","LinechartsTabs","data1","data2","data3","panes","menuItem","render","Tab","Pane","attached","as","rangeslider","generateFakeDates","names2","visible","includes","medication_data","hoverinfo","hoverlabel","namelength","line","width","text","textposition","menu","secondary","pointing","Dropdown","inline","DonutChart","chart","hole","values","labels","textinfo","automargin","showlegend","Dashboard","position","Label","Date","toLocaleDateString","hour12","Grid","Column","Subheader","fluid","vertical","inverted","Container","Row","Segment","renderHeader","renderMenu","AppContainer","connect","combineReducers","test","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.47686130.chunk.js","sourcesContent":["export default {\n    first_name: \"Peter\",\n    last_name: \"Wilson\",\n    age: \"39\",\n    sex: \"Male\",\n    admitted_on: \"19-04-2020\",\n    admitted_to_IC: \"23-04-2020\",\n    preconditions: [\n        {name: \"smoking\", value: \"yes\"},\n        {name: \"obesity\", value: \"no\"},\n    ],\n    medication: [\n        {name: \"Hydrocodone\"},\n        {name: \"Generic Zocor\"},\n        {name: \"Lisinopril\"}\n    ]\n}\n","import React, { useState } from 'react';\nimport {Icon, Menu} from \"semantic-ui-react\";\nimport Patient from \"../utils/fakeData/patient\";\n\n\n\nconst PatientInfo = (props) =>{\n    return(\n        <>\n            <Menu.Item>\n            <Menu.Header>Personal details <Icon name={'user'} className={'pull-right'}/></Menu.Header>\n            </Menu.Item>\n            <Menu.Item>\n                First name: <b className={'PatientValues'} >{Patient.first_name}</b>\n            </Menu.Item>\n            <Menu.Item>\n                <Icon name={Patient.icon} />\n                Last name: <b className={'PatientValues'} >{Patient.last_name}</b>\n            </Menu.Item>\n            <Menu.Item>\n                <Icon name={Patient.icon} />\n                Gender: <b className={'PatientValues'} >{Patient.sex}</b>\n            </Menu.Item>\n            <Menu.Item>\n                <Icon name={Patient.icon} />\n                Age: <b className={'PatientValues'} >{Patient.age}</b>\n            </Menu.Item>\n            <Menu.Item>\n                Admitted on: <i className={'PatientValues'} >{Patient.admitted_on}</i>\n            </Menu.Item>\n            <Menu.Item>\n                Admitted to IC: <i className={'PatientValues'} >{Patient.admitted_to_IC}</i>\n            </Menu.Item>\n            <Menu.Item>\n                <Menu.Header>Preconditions<Icon name={'bell'} className={'pull-right'}/></Menu.Header>\n                <Menu.Menu>\n                    {renderSubItems(Patient.preconditions)}\n                </Menu.Menu>\n            </Menu.Item>\n            <Menu.Item>\n                <Menu.Header>Medication<Icon name={'pills'} className={'pull-right'}/></Menu.Header>\n                <Menu.Menu>\n                    {renderSubItems(Patient.medication)}\n                </Menu.Menu>\n            </Menu.Item>\n        </>\n    )\n}\nconst renderSubItems = (items) =>{\n    return items.map((item) =>{\n        return (\n            <Menu.Item>\n                - {item.name}: <b>{item.value}</b>\n            </Menu.Item>\n        )\n    })\n}\n\n\nexport default PatientInfo","import React, { useState } from 'react';\nimport {Icon, Menu} from \"semantic-ui-react\";\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport Plotly from 'plotly.js-basic-dist'\nimport SizeMe from 'react-sizeme'\nconst Plot = createPlotlyComponent(Plotly);\n\nconst hb_options = [72, 73, 73, 74, 74, 74, 75, 75, 75, 75, 75,75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 77, 77,78]\nconst bp_high_options = [ 84,84,84,84,84,84,84,84,84,84,83, 85, 85, 85, 85, 85, 85]\nconst bp_low_options = [55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55, 60,60,60, 60,60,60, 60,60,60, 60,60, 60,60, 60,60]\nconst sat_options = [ 120, 120, 150,150,150,160,160,160,160,160,160,170, 170, 180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180]\n\nfunction isEmpty(obj) {\n    for(var prop in obj) {\n        if(obj.hasOwnProperty(prop))\n            return false;\n    }\n\n    return true;\n}\n\nconst fakeData = (n, options) =>{\n    const y =[]\n    for(let i=0; i < n; i++){\n        y.push(options[Math.floor(Math.random() * options.length)])\n    }\n    return y;\n}\n\nclass LineChartsMoving extends React.Component{\n    state = {heartBeat: {}, bp_high:{}, bp_low:{}, sat: {},sat_base:{}, revisionId: 0,     layout: {\n        datarevision: 0,\n            xaxis: {\n                autorange: true,\n                showgrid: false,\n                zeroline: false,\n                showline: false,\n                autotick: false,\n                ticks: '',\n                showticklabels: false,\n            },\n            yaxis: {\n                zeroline: false,\n                range: [40, 135]\n            },\n            yaxis2: {\n                overlaying: 'y',\n                side: 'right',\n                range: [0, 220],\n            },\n            xaxis2: {\n                autorange: true,\n                showgrid: false,\n                zeroline: false,\n                showline: false,\n                autotick: false,\n                showticklabels: false,\n                ticks: '',\n                overlaying: 'x',\n                side: 'top'\n}\n        }}\n\n\n    componentDidMount() {\n        this.getPlotTracks()\n    }\n\n    updateData = (item, options) =>{\n        item.y.shift()\n        item.y.push(options[Math.floor(Math.random() * options.length)])\n        item.string =Math.random().toString(36).substring(7)\n        return item\n    }\n    getPlotTracks = () =>{\n        const hb = {\n            x: Array.from(Array(200).keys()),\n            y:fakeData(200, hb_options),\n            type: 'scatter',\n            mode: 'lines',\n            marker: {color: 'red'},\n            string:Math.random().toString(36).substring(7)\n        }\n        const bp_high = {\n            x: Array.from(Array(200).keys()),\n            y:fakeData(200, bp_high_options),\n            type: 'scatter',\n            mode: 'lines',\n            marker: {color: '#f54242'},\n            string:Math.random().toString(36).substring(7)\n        }\n        const bp_low = {\n            x: Array.from(Array(200).keys()),\n            y:fakeData(200, bp_low_options),\n            type: 'scatter',\n            mode: 'lines',\n            fill: 'tonexty',\n            marker: {color: '#f54242'},\n            string:Math.random().toString(36).substring(7)\n        }\n        const sat = {\n            x: Array.from(Array(200).keys()),\n            y:fakeData(200, sat_options),\n            type: 'scatter',\n            mode: 'lines',\n            yaxis: 'y2',\n            xaxis: 'x2',\n            mirror: true,\n            side: 'top',\n            marker: {color: 'green'},\n            string:Math.random().toString(36).substring(7)\n        }\n        const sat_base = {\n            x: Array.from(Array(200).keys()),\n            y:fakeData(200, [220]),\n            type: 'scatter',\n            mode: 'lines',\n            yaxis: 'y2',\n            xaxis: 'x2',\n            mirror: true,\n            side: 'top',\n            fill: 'tonexty',\n            marker: {color: 'green'},\n            string:Math.random().toString(36).substring(7)\n        }\n        this.setState({heartBeat: hb, bp_high:bp_high, bp_low:bp_low, sat:sat, sat_base:sat_base})\n    }\n\n    render() {\n        const layout = this.state.layout\n        if(!isEmpty(this.state.heartBeat)){\n            const {heartBeat, bp_high, bp_low, sat} = this.state\n            setTimeout(\n                () => {\n                    let new_hb = this.updateData(heartBeat, hb_options)\n                    let new_bp_high = this.updateData(bp_high, bp_high_options)\n                    let new_bp_low = this.updateData(bp_low, bp_low_options)\n                    let new_sat = this.updateData(sat, sat_options)\n                    this.setState({\n                        heartBeat: new_hb,\n                        bp_high: new_bp_high,\n                        bp_low: new_bp_low,\n                        sat: new_sat,\n                        revisionId: this.state.revisionId+1}\n                    )\n                    layout.datarevision = this.state.revisionId+1\n                }, 200);\n        }\n        return(\n            <>\n                <Plot\n                    layout={layout}\n                    revision={this.state.heartBeat}\n                    className={'full-size'}\n                    data={[this.state.heartBeat, this.state.bp_high, this.state.bp_low, this.state.sat, this.state.sat_base]}\n                />\n            </>\n        )\n    }\n\n\n}\n\n\n\nexport default SizeMe()(LineChartsMoving)","export default [\n    {\n        name: \"Med: Hydrocodone\",\n        periods: ['2020-04-01', '2020-04-20',null,'2020-04-21', '2020-04-26'],\n        y: [6000, 6000,6000,6000,6000]\n    },\n    {\n        name: \"Med: Lisinopril\",\n        periods: ['2020-04-01', '2020-04-29'],\n        y: [7000, 7000]\n    },\n    {\n        name: \"Med: Generic Zocor\",\n        periods: ['2020-04-10', '2020-04-12'],\n        y: [8000, 8000]\n    }\n]\n\n","import React, { useState } from 'react';\nimport {Icon, Menu, Tab} from \"semantic-ui-react\";\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport Plotly from 'plotly.js-basic-dist'\nimport SizeMe from 'react-sizeme'\nimport medication from \"../utils/fakeData/medication\";\nconst Plot = createPlotlyComponent(Plotly);\n\n\n\nconst fakeData = (n) =>{\n    const y =[]\n    for(let i=0; i < n; i++){\n        y.push(Math.floor(Math.random() * 4000)+1000)\n    }\n    return y;\n}\n\nclass LinechartsTabs extends React.Component{\n    state = {data1:{}, data2:{}, data3:{}}\n\n    panes = [\n        {\n            menuItem: 'Mocusal Cytokines',\n            render: () => <Tab.Pane  attached={true} as={'div'}>\n                <Plot\n                    className={'full-size large'}\n                    data={this.state.data1}\n                    layout={{\n                        yaxis:{\n                            range: [0, 8000]\n                        },\n                        xaxis:{\n                            rangeslider: {},\n                            range: ['2020-04-14', '2020-04-29'],\n                            type: 'date'\n                        }\n                    }}\n                />\n            </Tab.Pane>,\n        },\n        {\n            menuItem: 'Serum Cytokines',\n            render: () => <Tab.Pane attached={true} as={'div'}>\n                <Plot\n                    className={'full-size'}\n                    data={this.state.data2}\n                />\n            </Tab.Pane>,\n        },\n        {\n            menuItem: 'Viral loads',\n            render: () => <Tab.Pane attached={false} as={'div'}>Tab 3 Content</Tab.Pane>,\n        },\n\n    ]\n    componentDidMount() {\n        this.getPlotTracks()\n    }\n    generateFakeDates = () =>{\n        const items = []\n        for(let i =1; i < 30; i++){\n            items.push(`2020-04-${i}`)\n        }\n        return items\n    }\n    getPlotTracks = () =>{\n        const names = ['IL6-IL1-TNF', 'CD30/TNFRSF8', 'IL-6', 'IL-1b', 'TNF-a']\n        const names2 = ['IL7', 'CD12', 'IL-615']\n\n        const data = names.map((name) =>{\n            let visible = \"legendonly\"\n            if(['IL6-IL1-TNF', 'CD30/TNFRSF8'].includes(name))\n                visible = true\n            return {\n                name:name,\n                x: this.generateFakeDates(),\n                y:fakeData(30),\n                type: 'scatter',\n                mode: 'lines',\n                fill: 'tonexty',\n                visible: visible,\n                string:Math.random().toString(36).substring(7)\n            }\n        })\n\n        const medication_data = medication.map((item)=>{\n            return {\n                name:item.name,\n                x: item.periods,\n                y: item.y,\n                type: 'line',\n                mode: 'lines',\n                hoverinfo:\"name\",\n                hoverlabel: {namelength :-1},\n                line:{\n                    width: 10\n                }\n            }\n        })\n        const data1 = [...data, ...medication_data]\n        const data2 = names2.map((name) =>{\n            let visible = \"legendonly\"\n            if(['IL7'].includes(name))\n                visible = true\n            return {\n                name:name,\n                x: Array.from(Array(200).keys()),\n                y:fakeData(30),\n                type: 'scatter',\n                mode: 'lines',\n                fill: 'tonexty',\n                visible: visible,\n                string:Math.random().toString(36).substring(7)\n            }\n        })\n        const data3 = names2.map((name) =>{\n            return {\n                name:name,\n                x: ['2013-10-04 22:23:00', '2013-11-04 22:23:00'],\n                y:[3,3],\n                type: 'line',\n                mode: 'lines+text',\n                text: \"test\",\n                textposition:\"center\",\n                line: {\n                    color: 'rgb(55, 128, 191)',\n                    width: 20\n                }\n            }\n        })\n        this.setState({data1: data1, data2: data2, data3:data3})\n    }\n\n    render() {\n\n        return(\n            <>\n                <Tab menu={{ secondary: true, pointing: true }} panes={this.panes} />\n            </>\n        )\n    }\n\n\n}\n\n\n\nexport default SizeMe()(LinechartsTabs)","import React from 'react'\nimport {Dropdown, Icon} from \"semantic-ui-react\";\n\n\nexport  default () => (\n    <span>\n        Loged-in as <i>administrator</i> {' '}\n        <Dropdown text={\"Dylan Hoogduin\"} inline   pointing className='link item'>\n              <Dropdown.Menu>\n                <Dropdown.Item><Icon name={'log out'}/>Log-out</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n      </span>\n);","import React, { useState } from 'react';\nimport {Icon, Menu, Tab} from \"semantic-ui-react\";\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport Plotly from 'plotly.js-basic-dist'\nimport SizeMe from 'react-sizeme'\nconst Plot = createPlotlyComponent(Plotly);\n\nconst hb_options = [72, 73, 73, 74, 74, 74, 75, 75, 75, 75, 75,75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 77, 77,78]\nconst bp_high_options = [ 84,84,84,84,84,84,84,84,84,84,83, 85, 85, 85, 85, 85, 85]\nconst bp_low_options = [55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55, 60,60,60, 60,60,60, 60,60,60, 60,60, 60,60, 60,60]\n\n\n\nconst fakeData = (n) =>{\n    const y =[]\n    for(let i=0; i < n; i++){\n        y.push(Math.floor(Math.random() * 4000)+1000)\n    }\n    return y;\n}\n\nclass DonutChart extends React.Component{\n    state = {data1:{}, data2:{}}\n\n\n    chart = () =>{\n        const data = [{\n            hole: .4,\n            type: \"pie\",\n            values: [2, 3, 4, 4],\n            labels: [\"Wages\", \"Operating expenses\", \"Cost of sales\", \"Insurance\"],\n            textinfo: \"label+percent\",\n            textposition: \"outside\",\n            automargin: true\n        }]\n        return(\n            <Plot\n                className={'full-size'}\n                data={data}\n                layout={{showlegend: false}}\n            />\n        )\n    }\n    panes = [\n        {\n            menuItem: 'Breathing system',\n            render: () => <Tab.Pane  attached={true} as={'div'}>\n                {this.chart()}\n            </Tab.Pane>,\n        },\n        {\n            menuItem: 'Something else',\n            render: () => <Tab.Pane attached={true} as={'div'}>test\n            </Tab.Pane>,\n        },\n        {\n            menuItem: 'Something else',\n            render: () => <Tab.Pane attached={false} as={'div'}>Tab 3 Content</Tab.Pane>,\n        },\n    ]\n\n    render() {\n\n        return(\n            <>\n                <Tab menu={{ secondary: true, pointing: true }} panes={this.panes} />\n            </>\n        )\n    }\n\n\n}\n\n\n\nexport default SizeMe()(DonutChart)","import React from 'react';\nimport {\n    Card,\n    Container,\n    Grid,\n    GridColumn,\n    Header,\n    Icon,\n    Image,\n    Input,\n    Label,\n    Menu,\n    Segment,\n    Sidebar\n} from 'semantic-ui-react'\nimport PatientInfo from \"../hooks/patientInfo\";\nimport LineChartsMoving from \"../hooks/linecharts-moving\";\nimport LineChartTabs from \"../hooks/linecharts-tabs\";\nimport UserOptions from '../hooks/userOptions'\nimport Clock from 'react-digital-clock';\nimport DonutChart from \"../hooks/donut-chart\";\n\nclass Dashboard extends React.Component{\n\n    renderHeader(){\n        return(\n            <Menu secondary>\n                <Menu.Item>\n                    <Icon name='arrow left' />\n                    Terug naar het patienten overzicht\n                </Menu.Item>\n                <Menu.Menu position='right'>\n                    <Menu.Item>\n                        <UserOptions/>\n                    </Menu.Item>\n                    <Menu.Item>\n                        <Label as='a' color={'blue'}>\n                            <center><Icon name='calendar' /><br/><br/></center>\n                            {new Date().toLocaleDateString()}\n                        </Label>\n                        <Label as='a' color={'green'}>\n                            <center><Icon name='clock' /><br/><br/></center>\n                            <Clock hour12= {false} />\n                        </Label>\n                    </Menu.Item>\n                </Menu.Menu>\n            </Menu>\n        )\n    }\n\n    renderMenu(){\n        return(\n                <Grid>\n                        <Grid.Column width={3} className={'sidebar-client'}>\n                            <div className={'logo-menu-box'}>\n                                <Header as='h1' icon>\n                                    Patient overview\n                                    <Header.Subheader>BEAT-COVID web-app </Header.Subheader>\n                                </Header>\n                            </div>\n                            <Menu fluid vertical inverted>\n                                <PatientInfo/>\n                            </Menu>\n                        </Grid.Column>\n                        <Grid.Column width={13} className={'mainContent-client'}>\n                            <Container fluid className={'internal-wrapper'}>\n                                <Grid>\n                                    <Grid.Row>\n                                    <Grid.Column width={16}>\n                                        <Segment>\n                                            <LineChartsMoving/>\n                                        </Segment>\n                                    </Grid.Column>\n                                    </Grid.Row>\n                                    <Grid.Row>\n                                    <Grid.Column width={16}>\n                                        <Segment>\n                                            <LineChartTabs/>\n                                        </Segment>\n                                    </Grid.Column>\n                                    </Grid.Row>\n                                    <Grid.Row>\n                                        <Grid.Column width={8}>\n                                            <Segment>\n                                                <LineChartTabs/>\n                                            </Segment>\n                                        </Grid.Column>\n                                        <Grid.Column width={8}>\n                                            <Segment>\n                                                <DonutChart/>\n                                            </Segment>\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid>\n                            </Container>\n                        </Grid.Column>\n                </Grid>\n\n        )\n    }\n    render() {\n        return (\n            <div className='clientOverviewSection'>\n                <Grid>\n                    <Grid.Column>\n                        <Segment>\n                            {this.renderHeader()}\n                        </Segment>\n                    </Grid.Column>\n                </Grid>\n                <Grid className={'no-offset'}>\n                    <Grid.Column className={'client-content-container'}>\n                        {this.renderMenu()}\n                    </Grid.Column>\n                </Grid>\n            </div>\n        );\n    }\n}\nexport default Dashboard;","import React, {Component} from 'react'\nimport {connect} from \"react-redux\";\n\nimport Dashboard from \"../components/dashboard\";\n\n\nclass AppContainer extends Component {\n\n    render() {\n        return <Dashboard />\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {}\n};\nexport default connect(mapStateToProps,{} )(AppContainer)","import {combineReducers} from \"redux\";\n\n\nexport default combineReducers({\n        test: {}\n});","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware, compose} from 'redux'\nimport reduxThunk from 'redux-thunk'\nimport App from \"./containers/AppContainer\";\nimport 'semantic-ui-css/semantic.min.css'\nimport './assets/styles.scss'\nimport reducers from './reducers'\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers,\n    composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}